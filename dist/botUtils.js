import { GrammyError, InlineKeyboard } from "grammy";
import { DEPOSIT_GROUP_ID, getAdmins, getProductsPremium, getProductsCodes, getProductsId, ORDERS_GROUP_ID, getProductsPromo, setProductsCodes, setProductsId, setProductsPremium, setProductsPromo, getUserBalance, deleteUserBalance, database, CRYPTOBOT_ID, getCryptobotDeposits, setUserBalance, deleteCryptobotDeposits, refs, getAllBalances } from "./globals.js";
import { generateShopKeyboard, mainKeyboard, toMenuKeyboard } from "./keyboards.js";
import { bot } from "./index.js";
export function isAdmin(chatId) {
    return getAdmins()[chatId.toString()] === true;
}
;
export function safeRound(num) {
    const stringNum = num.toFixed(10);
    const match = stringNum.match(/\.(\d{2})(9{4,})/);
    return match ? Number(stringNum.slice(0, match.index + 3)) : num;
}
;
export function getUserTag(ctx) {
    const username = ctx.chat?.username ? `@${ctx.chat.username}` : `${ctx.chat?.first_name || 'User'}`;
    return username;
}
export async function sendToGroup(groupId, message, inlineKeyboard) {
    try {
        await bot.api.sendMessage(groupId, message, {
            parse_mode: 'HTML',
            reply_markup: inlineKeyboard
        });
    }
    catch (error) {
        console.error('Error sending to group:', error);
    }
}
;
export async function sendDepositRequest(message, inlineKeyboard) {
    await sendToGroup(DEPOSIT_GROUP_ID, message, inlineKeyboard);
}
;
export async function sendOrderRequest(message, inlineKeyboard) {
    await sendToGroup(ORDERS_GROUP_ID, message, inlineKeyboard);
}
;
export function currentProducts(category) {
    switch (category) {
        case 'codes': return getProductsCodes();
        case 'id': return getProductsId();
        case 'premium': return getProductsPremium();
        case 'promo': return getProductsPromo();
        default: return [];
    }
}
;
export async function updateProducts(chatId, category, products) {
    try {
        const prods = products || currentProducts(category);
        switch (category) {
            case 'codes':
                await setProductsCodes(prods);
                break;
            case 'id':
                await setProductsId(prods);
                break;
            case 'premium':
                await setProductsPremium(prods);
                break;
            case 'promo':
                await setProductsPromo(prods);
                break;
        }
        await bot.api.sendMessage(chatId, `–¢–æ–≤–∞—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`, {
            reply_markup: new InlineKeyboard().text('üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'return')
        });
    }
    catch (error) {
        console.error('Firebase error:', error);
        await bot.api.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ Firebase.');
    }
}
function generateCartText(cart, type) {
    if (type === 'premium') {
        return `<b>‚û§ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å Premium</b>`;
    }
    if (!cart || cart.items.length === 0) {
        return `<b>‚û§ –í—ã–±–µ—Ä–∏—Ç–µ UC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\nüõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</b>`;
    }
    const itemsCount = {};
    for (const item of cart.items) {
        itemsCount[item.label] = (itemsCount[item.label] || 0) + 1;
    }
    const itemsText = Object.entries(itemsCount)
        .map(([label, count]) => {
        const product = currentProducts(type).find(p => p.label === label);
        return `<b>‚û• ${label} UC √ó ${count} = ${Math.round(count * product.price * 100) / 100}‚ÇΩ</b>`;
    })
        .join('\n');
    return `<b>‚û§ –í—ã–±–µ—Ä–∏—Ç–µ UC –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ)\nüõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n${itemsText}\n\n‚ú¶ –ò—Ç–æ–≥–æ: <u>${cart.total}‚ÇΩ</u></b>`;
}
;
export async function updateCartMessage(ctx, type) {
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    const messageId = ctx.msg?.message_id;
    const cart = ctx.session.cart;
    const caption = generateCartText(cart, type);
    const keyboard = await generateShopKeyboard(cart, type);
    try {
        if (messageId) {
            await ctx.api.editMessageCaption(chatId, messageId, {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
        }
        else {
            const sentMessage = await ctx.api.sendPhoto(chatId, 'https://ibb.co/wF0vRw5J', {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
            // ctx.session.state = { ...ctx.session.state, messageId: sentMessage.message_id };
        }
    }
    catch (error) {
        console.error('Error updating cart message:', error);
        await ctx.api.sendMessage(chatId, caption, {
            parse_mode: 'HTML',
            reply_markup: keyboard
        });
    }
}
;
export async function sendMainMessage(ctx, messageId) {
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    const firstName = ctx.chat.first_name || '';
    const lastName = ctx.chat.last_name || '';
    const greetingName = lastName ? `${firstName} ${lastName}` : firstName;
    const keyboard = mainKeyboard(chatId);
    const caption = `üôã‚Äç‚ôÇ –î–æ–±—Ä—ã–π –¥–µ–Ω—å, ${greetingName}!\nüí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å - ${getUserBalance(chatId) || 0}‚ÇΩ.`;
    try {
        if (messageId) {
            await ctx.api.editMessageMedia(chatId, messageId, {
                type: 'photo',
                media: 'https://ibb.co/8LVZ1Qcd',
                caption: caption,
                parse_mode: 'HTML'
            }, {
                reply_markup: keyboard
            });
        }
        else {
            await ctx.api.sendPhoto(chatId, 'https://ibb.co/8LVZ1Qcd', {
                caption: caption,
                parse_mode: 'HTML',
                reply_markup: keyboard
            });
        }
    }
    catch (error) {
        if (error.description.includes('403')) {
            console.log(`User ${chatId} blocked the bot. Removing...`);
            await deleteUserBalance(chatId.toString());
        }
        else {
            console.error('Error sending main message:', error);
        }
    }
}
;
export async function processCryptoBotMessage(ctx) {
    if (!ctx.msg?.text || !ctx.chat || ctx.chat.id.toString() !== DEPOSIT_GROUP_ID || ctx.msg.from?.id.toString() !== CRYPTOBOT_ID) {
        return;
    }
    const messageText = ctx.msg.text;
    const lines = messageText.split(' ');
    const senderIndex = lines.findIndex(line => line === '–æ—Ç–ø—Ä–∞–≤–∏–ª(–∞)');
    if (senderIndex === -1 || senderIndex + 2 >= lines.length || lines[senderIndex + 1] !== 'ü™ô') {
        await ctx.api.sendMessage(DEPOSIT_GROUP_ID, '‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞');
        return;
    }
    const paymentData = {
        username: lines.slice(0, senderIndex).join(' ').trim(),
        amount: parseFloat(lines[senderIndex + 2].replace(',', '.')),
        currency: 'USDT'
    };
    const [userId, deposit] = Object.entries(getCryptobotDeposits()).find(([_, d]) => d.username === paymentData.username) || [];
    if (userId && deposit) {
        const cleanedAmount = safeRound(paymentData.amount);
        const newBalance = (getUserBalance(userId) || 0) + cleanedAmount;
        await setUserBalance(userId, newBalance);
        await deleteCryptobotDeposits(userId);
        await ctx.api.sendMessage(DEPOSIT_GROUP_ID, `‚úÖ –ü–µ—Ä–µ–≤–æ–¥ ${cleanedAmount} ${paymentData.currency} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω\nID: ${userId}\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`, { reply_to_message_id: ctx.msg.message_id });
        await ctx.api.sendMessage(parseInt(userId), `üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${cleanedAmount}‚ÇΩ\n–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBalance}‚ÇΩ`, {
            reply_markup: new InlineKeyboard().text('üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω', 'open-shop')
        });
        if (deposit.messageId) {
            try {
                await ctx.api.deleteMessage(parseInt(userId), deposit.messageId);
            }
            catch (deleteError) {
                console.error('Error deleting message:', deleteError);
            }
        }
    }
    else {
        await ctx.api.sendMessage(DEPOSIT_GROUP_ID, `‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞–∫–∞–∑ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞\nPayment ID: ${paymentData.username}\n–°—É–º–º–∞: ${paymentData.amount} ${paymentData.currency}`, { reply_to_message_id: ctx.msg.message_id });
    }
}
;
export async function purchaseWithId(ctx) {
    const chatId = ctx.chat.id;
    const cart = ctx.session.cart;
    if (!cart || cart.items.length === 0) {
        // await bot.answerCallbackQuery(query.id, { text: '‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!' });
        return;
    }
    if (getUserBalance(chatId) < cart.total) {
        // await bot.answerCallbackQuery(query.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!' });
        await ctx.api.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.', {
            reply_markup: new InlineKeyboard()
                .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')
        });
        return;
    }
    if (ctx.session.state) {
        ctx.session.state.type = 'awaiting_pubg_id';
    }
    ctx.editMessageCaption({
        caption: '‚ú¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–≥—Ä–æ–≤–æ–π ID –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞!',
        reply_markup: new InlineKeyboard()
            .text('üîô –í –º–µ–Ω—é', 'return')
    });
}
;
export async function purchaseCodes(ctx) {
    const chatId = ctx.chat.id;
    const messageId = ctx.message.message_id;
    const firstName = ctx.chat?.first_name || '';
    const lastName = ctx.chat?.last_name || '';
    const cart = ctx.session.cart;
    if (!cart || cart.items.length === 0) {
        await ctx.answerCallbackQuery({ text: '‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!' });
        return;
    }
    const balance = getUserBalance(chatId);
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    if (balance < cart.total) {
        await ctx.api.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.', {
            reply_markup: new InlineKeyboard()
                .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')
        });
        return;
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–¥–æ–≤
    const requiredCodes = cart.items.reduce((acc, item) => {
        acc[item.label] = (acc[item.label] || 0) + 1;
        return acc;
    }, {});
    const codeCheckPromises = Object.keys(requiredCodes).map(async (label) => {
        const snapshot = await refs.codes.child(label)
            .orderByChild('used')
            .equalTo(false)
            .once('value');
        return snapshot.numChildren() >= requiredCodes[label];
    });
    const results = await Promise.all(codeCheckPromises);
    if (results.some(available => !available)) {
        await ctx.api.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–æ–¥–æ–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞');
        return;
    }
    // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–æ–≤
    const codesToSend = {};
    for (const label of Object.keys(requiredCodes)) {
        const snapshot = await refs.codes.child(label)
            .orderByChild('used')
            .equalTo(false)
            .limitToFirst(requiredCodes[label])
            .once('value');
        const codes = snapshot.val();
        codesToSend[label] = Object.keys(codes).map(key => codes[key].code);
        // –ü–æ–º–µ—Ç–∏—Ç—å –∫–æ–¥—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
        const updates = {};
        Object.keys(codes).forEach(key => {
            updates[`codes/${label}/${key}/used`] = true;
        });
        await database.ref().update(updates);
    }
    // –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
    const newBalance = balance - cart.total;
    await setUserBalance(chatId, newBalance);
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    const orderNumber = Date.now().toString(36).toUpperCase() + chatId.toString().slice(-4);
    const orderData = {
        orderId: orderNumber,
        userId: chatId,
        type: 'codes',
        codes: codesToSend,
        items: cart.items,
        total: cart.total,
        status: 'confirmed',
        timestamp: Date.now(),
        userInfo: {
            username: `${firstName} ${lastName}`,
            balanceBefore: balance,
            balanceAfter: newBalance
        }
    };
    try {
        await refs.orders.child(`${chatId}`).child(orderNumber).set(orderData);
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await ctx.api.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        return;
    }
    let codesMessage = '';
    for (const [label, codes] of Object.entries(codesToSend)) {
        const formattedCodes = codes.map(code => `<code>${code}</code>`).join('\n');
        codesMessage += `‚û• ${label} UC:\n${formattedCodes}\n\n`;
    }
    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let message = '‚úÖ –í–∞—à–∏ –∫–æ–¥—ã:\n\n' + codesMessage;
    // –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    delete ctx.session.cart;
    await ctx.api.sendMessage(chatId, message, {
        parse_mode: 'HTML'
    });
    sendMainMessage(ctx);
    await ctx.api.deleteMessage(chatId, messageId);
    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞–º
    sendOrderRequest(`‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∫–æ–¥–∞–º–∏ #${orderNumber}\n` +
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${firstName} ${lastName} (ID: ${chatId})\n` +
        `–ö–æ–¥—ã:\n\n` + codesMessage +
        `–°—É–º–º–∞: ${cart.total}‚ÇΩ`);
}
;
export async function purchasePremium(ctx, label, price) {
    const chatId = ctx.chat.id;
    if (getUserBalance(chatId) < price) {
        // await bot.answerCallbackQuery(query.id, { text: '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!' });
        await ctx.api.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.', {
            reply_markup: new InlineKeyboard()
                .text('üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')
        });
        return;
    }
    ctx.session.state = {
        type: 'awaiting_premium_tag',
        data: { label, price }
    };
    await ctx.editMessageCaption({
        caption: `‚ú¶ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å Telegram Premium (${label})`,
        reply_markup: new InlineKeyboard()
            .text('üîô –í –º–µ–Ω—é', 'return')
    });
}
;
export async function handlePubgIdInput(ctx, text) {
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    const cart = ctx.session.cart;
    if (!cart || cart.items.length === 0) {
        await ctx.reply('‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!');
        return;
    }
    const pubgId = text;
    const orderNumber = Date.now().toString(36).toUpperCase() + chatId.toString().slice(-4);
    // Format order items
    const itemsDetails = {};
    for (const item of cart.items) {
        itemsDetails[item.label] = (itemsDetails[item.label] || 0) + 1;
    }
    const itemsText = Object.entries(itemsDetails)
        .map(([label, count]) => {
        const product = currentProducts('id').find(p => p.label === label);
        return `‚û• ${label} UC √ó${count} = ${(product.price * count)}‚ÇΩ`;
    })
        .join('\n');
    // Deduct balance
    const balance = getUserBalance(chatId);
    const newBalance = balance - cart.total;
    await setUserBalance(chatId, newBalance);
    // Create order data
    const orderData = {
        orderId: orderNumber,
        userId: chatId,
        type: 'id',
        pubgId: pubgId,
        items: cart.items,
        total: cart.total,
        status: 'pending',
        timestamp: Date.now(),
        userInfo: {
            username: `${ctx.chat.first_name || ''} ${ctx.chat.last_name || ''}`.trim(),
            balanceBefore: balance,
            balanceAfter: newBalance
        }
    };
    // Save order to Firebase
    try {
        await refs.orders.child(chatId.toString()).child(orderNumber).set(orderData);
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
        return;
    }
    // Send order to admin group
    const orderText = `‚úÖ–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ 
üßæ#${orderNumber} 
üõç–¢–æ–≤–∞—Ä—ã : 
${itemsText} 
üíµ–°—Ç–æ–∏–º–æ—Å—Ç—å : ${cart.total} 
üÜî : ${pubgId} 
ü™™–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : ${orderData.userInfo.username} (ID: ${chatId}) .
‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ`;
    const orderKeyboard = new InlineKeyboard()
        .text('‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', `order-completed_${chatId}_${orderNumber}`)
        .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', `order-declined_${chatId}_${orderNumber}_${cart.total}`);
    sendOrderRequest(orderText, orderKeyboard);
    // Clear cart and state
    ctx.session.cart = undefined;
    ctx.session.state = undefined;
    await ctx.reply('‚úÖ ID —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
        reply_markup: new InlineKeyboard().text('üîô –í –º–µ–Ω—é', 'return')
    });
}
;
export async function sendUnusedCodes(ctx, productLabel) {
    try {
        const unusedCodesSnapshot = await refs.codes.child(productLabel)
            .orderByChild('used')
            .equalTo(false)
            .once('value');
        const unusedCodes = unusedCodesSnapshot.val() || {};
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤
        let unusedCodesMessage = `üìã –¢–µ–∫—É—â–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –¥–ª—è ${productLabel} UC:\n`;
        Object.values(unusedCodes).forEach((codeData, index) => {
            unusedCodesMessage += `${index + 1}. <code>${codeData.code}</code>\n`;
        });
        if (ctx.chat) {
            await ctx.api.sendMessage(ctx.chat.id, unusedCodesMessage, {
                parse_mode: 'HTML'
            });
        }
        ;
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–æ–≤:', error);
        if (ctx.chat) {
            await ctx.api.sendMessage(ctx.chat.id, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–¥–æ–≤');
        }
        ;
    }
}
;
export async function sendBroadcastMessage(ctx, broadcastMessage) {
    const userBalances = getAllBalances();
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    if (!userBalances) {
        await ctx.api.sendMessage(chatId, '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.');
        return;
    }
    ;
    const userIds = Object.keys(userBalances);
    for (const userId of userIds) {
        try {
            await bot.api.sendMessage(userId, broadcastMessage);
        }
        catch (error) {
            if (error instanceof GrammyError) {
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram API
                if (error.error_code === 429) { // Too Many Requests
                    const retryAfter = error.parameters?.retry_after || 1;
                    console.log(`Rate limit exceeded, retrying after ${retryAfter} seconds...`);
                    await new Promise(resolve => setTimeout(resolve, retryAfter * 1000));
                    continue; // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
                }
                ;
                console.error(`Telegram API error for user ${userId}:`, error.description);
            }
            ;
        }
        await new Promise(resolve => setTimeout(resolve, 100));
    }
    await ctx.api.sendMessage(chatId, `–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${userIds.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.`, {
        reply_markup: toMenuKeyboard
    });
}
