import express from 'express';
import dotenv from 'dotenv';
dotenv.config();
import { Bot, InlineKeyboard, session } from 'grammy';
import admin from 'firebase-admin';
import { createRequire } from 'module';
import { adminKeyboard, catalogKeyboard, categoryKeyboard, changeCredentialsKeyboard, cancelKeyboard, paymentMethodsKeyboard, productsManagementKeyboard, profileKeyboard, pubgKeyboard, returnKeyboard, starsKeyboard, telegramKeyboard, cryptobotKeyboard, manageAdminsKeyboard, adminReturnKeyboard, deleteProductListKeyboard, manageCodesKeyboard, manageCodesListKeyboard, toMenuKeyboard, depositKeyboard, orderRequestKeyboard, depositRequestKeyboard } from './keyboards.js';
import { ADMIN_CHAT_ID, database, deletePendingChecks, DEPOSIT_GROUP_ID, getAdmins, getAllBalances, getPaymentDetails, getPendingChecks, getStarsPrice, getUserBalance, initializeFirebaseData, refs, setAdmins, setPaymentDetails, setPendingCheck, setStarsPrice, setUserBalance } from './globals.js';
import { currentProducts, getUserTag, handlePubgIdInput, isAdmin, processCryptoBotMessage, purchaseCodes, purchasePremium, purchaseWithId, sendBroadcastMessage, sendDepositRequest, sendMainMessage, sendOrderRequest, sendUnusedCodes, updateCartMessage, updateProducts } from './botUtils.js';
const app = express();
app.use(express.json());
const require = createRequire(import.meta.url);
const serviceAccount = require('../secrets/serviceAccount.json');
const token = process.env.token || '';
export const bot = new Bot(token);
// Firebase configuration
admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://ronidbot-default-rtdb.firebaseio.com"
});
initializeFirebaseData();
// Initialize session middleware
bot.use(session({
    initial: () => ({})
}));
const IMAGES = {
    welcome: 'https://ibb.co/8LVZ1Qcd',
    pack: 'https://ibb.co/wF0vRw5J',
    payment: 'https://ibb.co/W4VVcZWz',
    amount: 'https://ibb.co/W4VVcZWz'
};
// Command handlers
bot.command('start', async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    if (getUserBalance(chatId) === undefined) {
        await setUserBalance(chatId, 0);
    }
    await sendMainMessage(ctx);
});
// Callback query handlers
bot.on('callback_query:data', async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId)
        return;
    const data = ctx.callbackQuery.data;
    const messageId = ctx.msg.message_id;
    try {
        if (data === 'return') {
            ctx.session.cart = undefined;
            ctx.session.state = undefined;
            await sendMainMessage(ctx, messageId);
        }
        else if (data === 'main-message') {
            ctx.session.cart = undefined;
            ctx.session.state = undefined;
            await sendMainMessage(ctx);
        }
        else if (data === 'catalog') {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:', {
                reply_markup: catalogKeyboard
            });
        }
        else if (data === 'pubg') {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', {
                reply_markup: pubgKeyboard
            });
        }
        else if (data === 'telegram') {
            await ctx.editMessageText('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:', {
                reply_markup: telegramKeyboard
            });
        }
        else if (data.startsWith('open-shop')) {
            const type = data.split('_')[1] || '';
            if (type === 'stars') {
                ctx.session.state = { type: 'awaiting_stars_amount' };
                await ctx.editMessageText(`1‚≠êÔ∏è = ${getStarsPrice()}‚ÇΩ . –ù–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:`, {
                    reply_markup: new InlineKeyboard().text('‚ùå –û—Ç–º–µ–Ω–∞', 'return')
                });
                return;
            }
            if (!ctx.session.cart) {
                ctx.session.cart = { items: [], total: 0 };
            }
            await updateCartMessage(ctx, type);
        }
        else if (data === 'admin-panel') {
            if (!isAdmin(chatId)) {
                return;
            }
            ctx.session.cart = undefined;
            ctx.session.state = undefined;
            await ctx.editMessageMedia({
                type: 'photo',
                media: IMAGES.welcome,
                caption: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å!'
            }, {
                reply_markup: adminKeyboard
            });
        }
        else if (data === 'my-profile') {
            ctx.session.cart = undefined;
            ctx.session.state = undefined;
            await ctx.editMessageCaption({
                caption: `<b>‚ú¶ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å!
üë§–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : <code>${chatId}</code> 
üí≥–ë–∞–ª–∞–Ω—Å : <u>${getUserBalance(chatId)}‚ÇΩ</u></b>`,
                reply_markup: profileKeyboard
            });
        }
        else if (data === 'my-orders') {
            try {
                const snapshot = await refs.orders.child(`${chatId}`).once('value');
                const orders = snapshot.val();
                if (!orders) {
                    return ctx.api.sendMessage(chatId, 'üì≠ –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤');
                }
                const ordersList = Object.entries(orders)
                    .map(([orderId, order]) => {
                    let details = '';
                    if (order.type === 'codes') {
                        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ–¥—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                        const codesText = order.codes
                            ? Object.entries(order.codes)
                                .map(([label, codes]) => `‚û• ${label} UC:\n${codes.join('\n')}`)
                                .join('\n\n')
                            : '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–¥–æ–≤';
                        details = `\nüîë –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –∫–æ–¥—ã:\n${codesText}`;
                    }
                    else {
                        details = `\nüÜî –ò–≥—Ä–æ–≤–æ–π ID: ${order.pubgId}`;
                    }
                    return `üÜî –ó–∞–∫–∞–∑ #${orderId}
üìÖ –î–∞—Ç–∞: ${new Date(order.timestamp).toLocaleDateString()}
üõç –¢–æ–≤–∞—Ä–æ–≤: ${order.items.length}
üíµ –°—É–º–º–∞: ${order.total}‚ÇΩ
üìä –°—Ç–∞—Ç—É—Å: ${getStatusEmoji(order.status)} ${order.status}
${details}`;
                })
                    .join('\n\n‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n');
                ctx.api.sendMessage(chatId, `üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n${ordersList}`, {
                    parse_mode: 'HTML',
                    reply_markup: returnKeyboard
                });
                ctx.api.deleteMessage(chatId, messageId);
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:', error);
            }
            function getStatusEmoji(status) {
                switch (status) {
                    case 'confirmed': return '‚úÖ';
                    default: return '‚è≥';
                }
            }
        }
        else if (data === 'deposit') {
            ctx.api.editMessageMedia(chatId, messageId, {
                type: 'photo',
                media: IMAGES.payment,
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'
            }, {
                reply_markup: paymentMethodsKeyboard
            });
            return;
        }
        else if (data === 'deposit-with-bybit') {
            ctx.api.editMessageMedia(chatId, messageId, {
                type: 'photo',
                media: IMAGES.amount,
                caption: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å: '
            }, {
                reply_markup: cancelKeyboard
            });
            ctx.session.state.type = 'awaiting_deposit';
            return;
        }
        else if (data === 'deposit-with-cryptobot') {
            ctx.api.editMessageMedia(chatId, messageId, {
                type: 'photo',
                media: IMAGES.amount,
                caption: '<b>‚û§ –û–ø–ª–∞—Ç–∏—Ç–µ —Å—á—ë—Ç –Ω–∏–∂–µ –Ω–∞ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏! </b>',
                parse_mode: 'HTML'
            }, {
                reply_markup: cryptobotKeyboard
            });
        }
        else if (data.startsWith('add-to-cart_')) {
            const [, label, price, type] = data.split('_');
            const products = currentProducts(type);
            const product = products.find((p) => p.label === label);
            if (!product) {
                await ctx.answerCallbackQuery({ text: '‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
                return;
            }
            if (!ctx.session.cart) {
                ctx.session.cart = { items: [], total: 0 };
            }
            ctx.session.cart.items.push(product);
            ctx.session.cart.total = Math.round((ctx.session.cart.total + parseFloat(price)) * 100) / 100;
            await updateCartMessage(ctx, type);
            await ctx.answerCallbackQuery({ text: `‚úÖ ${label} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É` });
        }
        else if (data.startsWith('cart_')) {
            const [, action, type] = data.split('_');
            switch (action) {
                case 'clear':
                    delete ctx.session.cart;
                    await updateCartMessage(ctx, type);
                    await ctx.answerCallbackQuery({ text: 'üóë –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞' });
                    break;
                case 'buy-with-id':
                    await purchaseWithId(ctx);
                    break;
                case 'buy-codes':
                    await purchaseCodes(ctx);
                    break;
                // case 'buy-promo':
                //   await purchasePromo(ctx);
                //   break;
            }
        }
        else if (data.startsWith('buy-premium_')) {
            const [, label, price] = data.split('_');
            await purchasePremium(ctx, label, parseInt(price));
        }
        else if (data === 'edit-payment-details') {
            await ctx.editMessageCaption({
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                reply_markup: changeCredentialsKeyboard
            });
            return;
        }
        else if (data.startsWith('select-payment-method_')) {
            const method = data.split('_')[1];
            ctx.session.state = {
                type: 'awaiting_to_change_credentials',
                data: { method }
            };
            await ctx.editMessageCaption({
                caption: `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è ${method}:`,
                reply_markup: cancelKeyboard
            });
            return;
        }
        else if (data === 'manage-balances') {
            if (ctx.session.state) {
                ctx.session.state.type = 'awaiting_user_to_change_balance';
            }
            ;
            await ctx.editMessageCaption({
                caption: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á–µ–π –±–∞–ª–∞–Ω—Å –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
                reply_markup: cancelKeyboard
            });
            return;
        }
        else if (data === 'manage-products') {
            await ctx.editMessageCaption({
                caption: 'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–æ–≤:',
                reply_markup: categoryKeyboard
            });
            return;
        }
        else if (data.startsWith('manage-category_')) {
            const categoryNames = {
                codes: 'UC –ø–æ –∫–æ–¥–∞–º',
                id: 'UC –ø–æ ID',
                promo: '–ê–∫—Ü–∏–∏',
                premium: 'Premium'
            };
            const category = data.split('_')[1];
            if (category === 'stars') {
                ctx.editMessageCaption({
                    caption: '‚≠ê –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∑–≤–µ–∑–¥–∞–º–∏',
                    reply_markup: starsKeyboard
                });
                return;
            }
            await ctx.editMessageCaption({
                caption: `üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏ (${categoryNames[category]}):`,
                reply_markup: productsManagementKeyboard(category)
            });
            return;
        }
        else if (data.startsWith('edit-product_')) {
            const [, category, label] = data.split('_');
            if (!isAdmin(chatId)) {
                return;
            }
            const products = currentProducts(category);
            const product = products.find(p => p.label === label);
            if (!product) {
                ctx.api.sendMessage(chatId, `–¢–æ–≤–∞—Ä —Å –º–µ—Ç–∫–æ–π ${label} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                    reply_markup: returnKeyboard
                });
                return;
            }
            ctx.api.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–æ–≤–∞—Ä–∞ ${label}:`, {
                reply_markup: cancelKeyboard
            });
            ctx.session.state = {
                type: 'awaiting_to_change_product',
                data: { category }
            };
            return;
        }
        else if (data.startsWith('delete-product-list_')) {
            const category = data.split('_')[1];
            ctx.editMessageCaption({
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:',
                reply_markup: deleteProductListKeyboard(category)
            });
            return;
        }
        else if (data.startsWith('delete-product_')) {
            const [, category, labelToDelete] = data.split('_');
            if (!isAdmin(chatId)) {
                return;
            }
            const products = currentProducts(category);
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–≤–∞—Ä–∞
            const product = products.find(p => p.label === labelToDelete);
            if (!product) {
                ctx.api.sendMessage(chatId, `–¢–æ–≤–∞—Ä —Å –º–µ—Ç–∫–æ–π ${labelToDelete} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                    reply_markup: returnKeyboard
                });
                return;
            }
            const index = products.findIndex(product => product.label === labelToDelete);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞–π–¥–µ–Ω –ª–∏ —Ç–æ–≤–∞—Ä
            if (index !== -1) {
                // –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –º–∞—Å—Å–∏–≤–∞
                products.splice(index, 1);
                updateProducts(chatId, category, products);
            }
            else {
                ctx.api.sendMessage(chatId, `–¢–æ–≤–∞—Ä ${labelToDelete} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
                    reply_markup: returnKeyboard
                });
            }
            return;
        }
        else if (data.startsWith('add-product_')) {
            const category = data.split('_')[1];
            ctx.session.state = {
                type: 'awaiting_new_product_label',
                data: category
            };
            await ctx.editMessageCaption({
                caption: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:',
                reply_markup: cancelKeyboard
            });
        }
        else if (data === 'manage-admins') {
            await ctx.editMessageCaption({
                caption: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏:',
                reply_markup: manageAdminsKeyboard
            });
            return;
        }
        else if (data === 'add-admin') {
            await ctx.editMessageCaption({
                caption: '–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º',
                reply_markup: cancelKeyboard
            });
            ctx.session.state.type = 'awaiting_to_add_admin';
            return;
        }
        else if (data === 'remove-admin') {
            await ctx.editMessageCaption({
                caption: '–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å',
                reply_markup: cancelKeyboard
            });
            ctx.session.state.type = 'awaiting_to_remove_admin';
            return;
        }
        else if (data === 'send-broadcast') {
            if (!isAdmin(chatId)) {
                return;
            }
            ;
            await ctx.editMessageCaption({
                caption: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:',
                reply_markup: adminReturnKeyboard
            });
            ctx.session.state.type = 'awaiting_to_create_mailing';
        }
        else if (data === 'manage-codes') {
            ctx.session.cart = undefined;
            ctx.session.state = undefined;
            await ctx.editMessageCaption({
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å –∫–æ–¥–∞–º–∏',
                reply_markup: manageCodesKeyboard
            });
            return;
        }
        else if (data === 'add-codes-list') {
            await ctx.editMessageCaption({
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤:',
                reply_markup: manageCodesListKeyboard('add')
            });
            return;
        }
        else if (data === 'remove-codes-list') {
            await ctx.editMessageCaption({
                caption: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–æ–¥–æ–≤:',
                reply_markup: manageCodesListKeyboard('remove')
            });
            return;
        }
        else if (data.startsWith('add-codes_')) {
            const productLabel = data.split('_')[1];
            sendUnusedCodes(ctx, productLabel);
            ctx.session.state = {
                type: 'awaiting_codes_for_product',
                data: { productLabel }
            };
            ctx.editMessageCaption({
                caption: `–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥—ã –¥–ª—è ${productLabel} UC (–ø–æ –æ–¥–Ω–æ–º—É –≤ —Å—Ç—Ä–æ–∫–µ):`,
                reply_markup: returnKeyboard
            });
            return;
        }
        else if (data.startsWith('remove-codes_')) {
            const productLabel = data.split('_')[1];
            sendUnusedCodes(ctx, productLabel);
            ctx.session.state = {
                type: 'awaiting_code_to_delete',
                data: productLabel
            };
            ctx.editMessageCaption({
                caption: '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å (–°–∫–æ–ø–∏—Ä—É–π—Ç–µ –Ω–∞–∂–∞—Ç–∏–µ–º –ø–æ –Ω–µ–º—É)',
                reply_markup: returnKeyboard
            });
            return;
        }
        else if (data.startsWith('confirm_')) {
            if (!isAdmin(chatId)) {
                return;
            }
            ;
            const userId = data.split('_')[1];
            const userInfo = getPendingChecks()[userId];
            if (userInfo) {
                const depositAmount = userInfo.amount;
                const balance = getUserBalance(userId);
                const newBalance = balance + depositAmount;
                await setUserBalance(userId, newBalance);
                sendDepositRequest(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${depositAmount}‚ÇΩ –¥–ª—è ${userInfo.userTag} (ID: ${userId}) –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.`);
                bot.api.sendMessage(userId, `–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${depositAmount}‚ÇΩ. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${balance}‚ÇΩ.`, {
                    reply_markup: toMenuKeyboard
                });
                deletePendingChecks(userId);
            }
            ;
        }
        else if (data.startsWith('reject_')) {
            if (!isAdmin(chatId)) {
                return;
            }
            ;
            const userId = data.split('_')[1];
            const userInfo = getPendingChecks()[userId];
            if (userInfo) {
                sendDepositRequest(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ ${userInfo.amount}‚ÇΩ –¥–ª—è ${userInfo.userTag} (ID: ${userId}) –æ—Ç–º–µ–Ω–µ–Ω–æ.`);
                bot.api.sendMessage(userId, `–í–∞—à–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ —Å—É–º–º—É ${userInfo.amount}‚ÇΩ –±—ã–ª–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`, {
                    reply_markup: toMenuKeyboard
                });
                deletePendingChecks(userId);
            }
            ;
        }
        else if (data.startsWith('order-completed_')) {
            if (!isAdmin(chatId)) {
                return;
            }
            ;
            const [, userId, orderId] = data.split('_');
            try {
                await refs.orders.child(userId).child(orderId).update({
                    status: 'confirmed',
                    confirmedAt: Date.now(),
                    adminId: chatId
                });
                sendOrderRequest(`‚úÖ –ó–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId} –±—ã–ª –≤—ã–ø–æ–ª–Ω–µ–Ω.`);
                bot.api.sendMessage(userId, '‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
                    reply_markup: toMenuKeyboard
                });
                ctx.editMessageReplyMarkup({
                    reply_markup: new InlineKeyboard()
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ', error);
            }
            return;
        }
        else if (data.startsWith('order-declined_')) {
            if (!isAdmin(chatId)) {
                return;
            }
            ;
            const [, userId, orderId, amount] = data.split('_');
            try {
                await refs.orders.child(userId).child(orderId).update({
                    status: 'declined',
                    confirmedAt: Date.now(),
                    adminId: chatId
                });
                const newBalance = getUserBalance(userId) + Math.round(parseFloat(amount) * 100) / 100;
                await setUserBalance(userId, newBalance);
                await sendOrderRequest(`‚ùå –ó–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId} –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω.`);
                bot.api.sendMessage(userId, '‚õîÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω—ë–Ω, –ø—Ä–∏—á–∏–Ω—É —É–∑–Ω–∞–π—Ç–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
                    reply_markup: toMenuKeyboard
                });
                ctx.editMessageReplyMarkup({
                    reply_markup: new InlineKeyboard()
                });
            }
            catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ', error);
            }
            return;
        }
        // ... (–¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤)
        await ctx.answerCallbackQuery();
    }
    catch (error) {
        console.error('Callback query error:', error);
    }
});
// Message handler
bot.on('message', async (ctx) => {
    const chatId = ctx.chat?.id;
    if (!chatId || !ctx.msg.text)
        return;
    const userTag = getUserTag(ctx);
    const text = ctx.msg.text;
    const state = ctx.session.state;
    try {
        // Process CryptoBot messages
        await processCryptoBotMessage(ctx);
        // Handle admin replies
        if (ctx.msg.reply_to_message && isAdmin(chatId)) {
            // const replyTo = ctx.msg.reply_to_message;
            // if (replyTo.forward_from) {
            //   const userId = replyTo.forward_from.id;
            //   await ctx.api.sendMessage(userId, `–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ${text}`);
            //   await sendMessageToAllAdmins(`–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
            // }
            console.log(ctx.msg);
        }
        if (state) {
            if (state.type === 'awaiting_pubg_id') {
                handlePubgIdInput(ctx, text);
            }
            else if (state.type === 'awaiting_stars_amount') {
            }
            else if (state.type === 'awaiting_user_tag') {
                const starsAmount = state.data.starsAmount;
            }
            else if (state.type === 'awaiting_premium_tag') {
                try {
                    const tag = text;
                    if (!tag.startsWith('@')) {
                        ctx.api.sendMessage(chatId, '–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–∞—Å—Ç–æ—è–∏—â–∏–π —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å @', {
                            reply_markup: cancelKeyboard
                        });
                        return;
                    }
                    ;
                    const label = state.data.label;
                    const price = state.data.price;
                    const balance = getUserBalance(chatId);
                    if (price > balance) {
                        ctx.api.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–≤–æ–π –±–∞–ª–∞–Ω—Å.', {
                            reply_markup: depositKeyboard
                        });
                        ctx.session = undefined;
                        return;
                    }
                    ;
                    const orderNumber = Date.now().toString(36).toUpperCase() + chatId.toString().slice(-4);
                    const newBalance = balance - price;
                    await setUserBalance(chatId, newBalance);
                    const orderData = {
                        orderId: orderNumber,
                        userId: chatId,
                        type: 'premium',
                        tag: tag,
                        items: label,
                        total: price,
                        status: 'pending',
                        timestamp: Date.now(),
                        userInfo: {
                            username: userTag,
                            balanceBefore: balance,
                            balanceAfter: newBalance
                        }
                    };
                    await refs.orders.child(chatId.toString()).child(orderNumber).set(orderData);
                    const orderText = [
                        '‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
                        `üßæ#${orderNumber}`,
                        '–¢–∏–ø –∑–∞–∫–∞–∑–∞: Premium',
                        `–¢–æ–≤–∞—Ä—ã: ${label}`,
                        `üíµ–°—Ç–æ–∏–º–æ—Å—Ç—å: ${price}`,
                        `üÜî: ${tag}`,
                        `ü™™–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userTag} (ID: ${chatId}).`,
                        '‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂'
                    ].join('\n');
                    sendOrderRequest(orderText, orderRequestKeyboard(chatId, orderNumber, price));
                    ctx.api.sendMessage(chatId, `–í–∞—à –∑–∞–∫–∞–∑ ${label} Telegram Premium –∑–∞ ${price}‚ÇΩ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${tag} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`, {
                        reply_markup: toMenuKeyboard
                    });
                }
                catch (error) {
                    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
                    await ctx.api.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                }
                return;
            }
            else if (state.type === 'awaiting_deposit') {
                const amount = parseFloat(text);
                if (isNaN(amount)) {
                    await ctx.api.sendMessage(chatId, '–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É', {
                        reply_markup: cancelKeyboard
                    });
                }
                ;
                await ctx.api.sendMessage(chatId, `<b>‚û§ByBit UID - <code>${getPaymentDetails().ByBit}</code> \n ‚ñ´Ô∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ ${amount}‚ÇΩ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤—ã—à–µ ID, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç!</b>`, {
                    reply_markup: cancelKeyboard,
                    parse_mode: 'HTML'
                });
                ctx.session.state = {
                    type: 'awaiting_receipt',
                    data: {
                        amount,
                        userTag,
                        userId: chatId
                    }
                };
                return;
            }
            else if (state.type === 'awaiting_receipt') {
                const userInfo = {
                    amount: state.data.amount,
                    userTag: state.data.userTag,
                    userId: state.data.userId
                };
                await setPendingCheck(chatId, userInfo);
                await bot.api.forwardMessage(DEPOSIT_GROUP_ID, chatId, ctx.message.message_id);
                await sendDepositRequest(`üÜï –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞\n` +
                    `üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userTag} (ID: ${chatId})\n` +
                    `üíµ –°—É–º–º–∞: ${userInfo.amount}‚ÇΩ\n` +
                    `üìÖ –í—Ä–µ–º—è: ${new Date().toLocaleString()}`, depositRequestKeyboard(chatId));
                await ctx.api.sendMessage(chatId, '–ß–µ–∫ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.', {
                    reply_markup: toMenuKeyboard
                });
                ctx.session.state = undefined;
                ctx.session.cart = undefined;
                return;
            }
            else if (state.type === 'awaiting_to_change_product') {
                const category = state.data.category;
                const newPrice = parseFloat(text);
                if (isNaN(newPrice)) {
                    await ctx.api.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É.', {
                        reply_markup: adminReturnKeyboard
                    });
                    return;
                }
                ;
                await updateProducts(chatId, category);
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_new_product_label') {
                const newLabel = text;
                await ctx.api.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ (${newLabel}): `, {
                    reply_markup: adminReturnKeyboard
                });
                ctx.session.state = {
                    type: 'awaiting_new_product_price',
                    data: {
                        newLabel,
                        category: state.data.category
                    }
                };
                return;
            }
            else if (state.type === 'awaiting_new_product_price') {
                const newPrice = parseFloat(text);
                if (isNaN(newPrice)) {
                    await ctx.api.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', {
                        reply_markup: adminReturnKeyboard
                    });
                    return;
                }
                ;
                const newLabel = state.data.newLabel;
                const category = state.data.category;
                const products = currentProducts(category);
                products.push({ label: newLabel, price: newPrice });
                products.sort((a, b) => {
                    return parseInt(a.label, 10) - parseInt(b.label, 10);
                });
                await updateProducts(chatId, category, products);
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_stars_price') {
                const newPrice = parseFloat(text);
                if (isNaN(newPrice)) {
                    await ctx.api.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', {
                        reply_markup: adminReturnKeyboard
                    });
                    return;
                }
                ;
                await setStarsPrice(newPrice);
                await ctx.api.sendMessage(chatId, '–¶–µ–Ω–∞ –Ω–∞ –∑–≤–µ–∑–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
                    reply_markup: toMenuKeyboard
                });
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_to_change_credentials') {
                const method = state.data.method;
                const newValue = text;
                await setPaymentDetails(method, newValue);
                await ctx.api.sendMessage(chatId, `‚úÖ –†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è ${method} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!`, {
                    reply_markup: toMenuKeyboard
                });
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_user_to_change_balance') {
                const userId = text;
                await ctx.api.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${getUserBalance(userId)}. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è –±–∞–ª–∞–Ω—Å–∞:`, {
                    reply_markup: adminReturnKeyboard
                });
                ctx.session.state = {
                    type: 'awaiting_to_change_balance',
                    data: { userId }
                };
                return;
            }
            else if (state.type === 'awaiting_to_change_balance') {
                const newBalance = parseFloat(text);
                const userId = state.data.userId;
                if (isNaN(newBalance)) {
                    await ctx.api.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.', {
                        reply_markup: adminReturnKeyboard
                    });
                    return;
                }
                ;
                const userBalance = getUserBalance(chatId);
                if (userBalance || userBalance === 0) {
                    await setUserBalance(chatId, newBalance);
                    await ctx.api.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID ${userId} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${newBalance}‚ÇΩ.`, {
                        reply_markup: toMenuKeyboard
                    });
                }
                else {
                    await ctx.api.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º id –Ω–µ—Ç.', {
                        reply_markup: toMenuKeyboard
                    });
                }
                ;
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_to_create_mailing') {
                const broadcastMessage = text;
                if (!broadcastMessage) {
                    await ctx.api.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', {
                        reply_markup: adminReturnKeyboard
                    });
                    return;
                }
                ;
                sendBroadcastMessage(ctx, broadcastMessage);
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_to_add_admin') {
                const newAdminId = text;
                const users = getAllBalances();
                if (!Object.prototype.hasOwnProperty.call(users, newAdminId)) {
                    await ctx.api.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID "${newAdminId}" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–π ID –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑. –í–æ–∑–º–æ–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–æ—Ç–µ`, {
                        reply_markup: toMenuKeyboard
                    });
                }
                ;
                const admins = getAdmins();
                if (!admins[chatId]) {
                    const newAdmins = { ...admins, [newAdminId]: true };
                    await setAdmins(newAdmins);
                    await ctx.api.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${newAdminId} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.`, {
                        reply_markup: toMenuKeyboard
                    });
                    await bot.api.sendMessage(newAdminId, '–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.', {
                        reply_markup: toMenuKeyboard
                    });
                }
                else {
                    await ctx.api.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${newAdminId} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.`, {
                        reply_markup: toMenuKeyboard
                    });
                }
                ;
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_to_remove_admin') {
                const adminIdToRemove = text;
                const admins = getAdmins();
                if (admins[adminIdToRemove]) {
                    if (adminIdToRemove === ADMIN_CHAT_ID) {
                        await ctx.api.sendMessage(chatId, '–ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞', {
                            reply_markup: toMenuKeyboard
                        });
                    }
                    else {
                        delete admins[adminIdToRemove];
                        await setAdmins(admins);
                        await ctx.api.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${adminIdToRemove} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.`, {
                            reply_markup: toMenuKeyboard
                        });
                        await bot.api.sendMessage(adminIdToRemove, '–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.', {
                            reply_markup: toMenuKeyboard
                        });
                    }
                    ;
                }
                ;
                ctx.session.state = undefined;
                return;
            }
            else if (state.type === 'awaiting_codes_for_product') {
                const codes = text.split('\n')
                    .map(code => code.trim())
                    .filter(code => code.length > 0);
                const productLabel = state.data.productLabel;
                const updates = {};
                codes.forEach(code => {
                    const newCodeRef = refs.codes.child(productLabel).push();
                    updates[newCodeRef.key] = {
                        code: code,
                        used: false,
                        addedAt: Date.now()
                    };
                });
                await refs.codes.child(productLabel).update(updates)
                    .then(async () => {
                    await ctx.api.sendMessage(chatId, `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${codes.length} –∫–æ–¥–æ–≤ –¥–ª—è ${productLabel} UC`, {
                        reply_markup: toMenuKeyboard
                    });
                    ctx.session.state = undefined;
                })
                    .catch(async (error) => {
                    await ctx.api.sendMessage(chatId, `‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–¥–æ–≤: ${error.message}`, {
                        reply_markup: adminReturnKeyboard
                    });
                });
                return;
            }
        }
        // State machine
        if (state) {
            switch (state.type) {
                case 'awaiting_pubg_id':
                    await handlePubgIdInput(ctx, text);
                    break;
                case 'awaiting_stars_amount':
                    let starsAmount = parseInt(text);
                    if (isNaN(starsAmount)) {
                        await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ');
                        return;
                    }
                    ctx.session.state = {
                        type: 'awaiting_stars_tag',
                        // starsAmount,
                        messageId: ctx.msg.message_id
                    };
                    await ctx.reply(`–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–≥ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ${starsAmount}‚≠êÔ∏è`);
                    break;
                case 'awaiting_stars_tag':
                    if (!text.startsWith('@')) {
                        await ctx.reply('–¢–µ–≥ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @');
                        return;
                    }
                    // starsAmount = state.starsAmount;
                    starsAmount = 1;
                    const total = starsAmount * getStarsPrice();
                    const balance = getUserBalance(chatId);
                    if ((balance || 0) < total) {
                        await ctx.reply('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.', {
                            reply_markup: new InlineKeyboard().text('üí≥–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', 'deposit')
                        });
                        ctx.session.state = undefined;
                        return;
                    }
                    // Create order
                    const orderNumber = Date.now().toString(36).toUpperCase() + chatId.toString().slice(-4);
                    const newBalance = balance - total;
                    await setUserBalance(chatId, newBalance);
                    const orderData = {
                        orderId: orderNumber,
                        userId: chatId,
                        type: 'stars',
                        tag: text,
                        items: [{ label: `${starsAmount}‚≠êÔ∏è`, price: total }],
                        total: total,
                        status: 'pending',
                        timestamp: Date.now(),
                        userInfo: {
                            username: `${ctx.chat.first_name || ''} ${ctx.chat.last_name || ''}`.trim(),
                            balanceBefore: balance,
                            balanceAfter: newBalance
                        }
                    };
                    // Save order to Firebase
                    try {
                        await database.ref(`orders/${chatId}/${orderNumber}`).set(orderData);
                    }
                    catch (error) {
                        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:', error);
                        await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ');
                        return;
                    }
                    // Send order to admin group
                    const orderText = `‚úÖ–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ 
üßæ#${orderNumber} 
üõç–¢–æ–≤–∞—Ä—ã : 
${starsAmount}‚≠êÔ∏è 
üíµ–°—Ç–æ–∏–º–æ—Å—Ç—å : ${total} 
üÜî : ${text} 
ü™™–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å : ${orderData.userInfo.username} (ID: ${chatId}) .
‚ö†Ô∏è–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ`;
                    const orderKeyboard = new InlineKeyboard()
                        .text('‚úÖ –ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω', `order-completed_${chatId}_${orderNumber}`)
                        .text('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑', `order-declined_${chatId}_${orderNumber}_${total}`);
                    sendOrderRequest(orderText, orderKeyboard);
                    await ctx.reply(`–í–∞—à –∑–∞–∫–∞–∑ ${starsAmount}‚≠êÔ∏è –∑–∞ ${total}‚ÇΩ –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç ${text} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è`, {
                        reply_markup: new InlineKeyboard().text('–ù–∞ –≥–ª–∞–≤–Ω—É—é', 'return')
                    });
                    ctx.session.state = undefined;
                    break;
                // ... (–¥—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            }
        }
    }
    catch (error) {
        console.error('Message handling error:', error);
    }
});
// Pre-checkout handler
bot.on('pre_checkout_query', async (ctx) => {
    await ctx.answerPreCheckoutQuery(true);
});
// Successful payment handler
// bot.on(':successful_payment', async (ctx) => {
//   const chatId = ctx.chat?.id;
//   if (!chatId) return;
//   // Handle successful payment
//   const payment = ctx.msg.successful_payment;
//   const amount = payment.total_amount / 100;
//   userBalances[chatId] = (userBalances[chatId] || 0) + amount;
//   await database.ref(`userBalances/${chatId}`).set(userBalances[chatId]);
//   await ctx.reply(`‚úÖ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amount}‚ÇΩ`);
//   await sendMainMessage(ctx);
// });
// Setup webhook
// bot.api.setWebhook(`${URL}/bot${token}`);
// // Start server
// app.use(express.json());
// app.post(`/bot${token}`, webhookCallback(bot, 'express'));
// app.listen(PORT, async () => {
//   await initializeFirebaseData();
//   console.log(`üöÄ Bot is running on port ${PORT}`);
// });
const startBot = async () => {
    // –£–¥–∞–ª–∏—Ç–µ –≤—Å–µ webhook-–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ polling
    await bot.start({
        onStart: (botInfo) => {
            console.log(`Bot @${botInfo.username} is running on polling!`);
        },
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
        drop_pending_updates: true, // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –ø–æ–∫–∞ –±–æ—Ç –±—ã–ª –æ—Ñ—Ñ–ª–∞–π–Ω
        allowed_updates: ['message', 'callback_query'] // –ü–æ–ª—É—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    });
};
startBot().catch(console.error);
